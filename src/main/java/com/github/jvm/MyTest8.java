package com.github.jvm;

/*
现在JVM在执行Java代码时，通常都会将解释执行和编译执行二者结合起来进行。
解释执行：通过解释器来读取字节码，遇到相应的指令就去执行该指令。
编译执行：通过即时编辑器（JIT）将字节码转换为本地机器码来执行；
现在JVM会根据代码热点来生成相应的本地机器码。
JVM采用基于栈的指令集，该方式移植性高，但相比于基于寄存器的指令集，该指令集效率低、速度慢。
基于栈的指令集与基于寄存器的指令集的关系：
1. JVM采用基于栈的指令集
2. 基于栈的指令集主要的操作有入栈和出栈两种
3. 基于栈的指令集的优势在于它可以在不同平台之间移植
4. 完成相同的操作，基于栈的指令集的数量一般要比基于寄存器的指令集的数量要多
5. 基于栈的指令集是在内存中操作的；而基于寄存器的指令集是在高速缓冲区中操作的，速度要快很多。
虽然JVM可以采用很多优化手段，但总体来说，基于栈的指令集速度还是会慢很多。
 */

public class MyTest8 {
    public static void main(String[] args) {
        
    }

    public int myCalculate(){
        int a = 1;
        int b = 2;
        int c = 3;
        int d = 4;
        int result = (a + b - c) * d;
        return result;
    }
}
